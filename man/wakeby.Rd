% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/wakeby.R
\name{qwakeby}
\alias{qwakeby}
\alias{fwakeby}
\alias{dqwakeby}
\alias{rwakeby}
\alias{pwakeby}
\alias{dwakeby}
\alias{is_wakeby_valid}
\alias{ffwakeby}
\title{Wakeby distribution}
\usage{
qwakeby(u, alpha, beta, gamma, sigma, epsilon)

fwakeby(u, alpha, beta, gamma, sigma, epsilon, log = FALSE)

dqwakeby(u, alpha, beta, gamma, sigma, epsilon, log = FALSE)

rwakeby(n, alpha, beta, gamma, sigma, epsilon)

pwakeby(
  q,
  alpha,
  beta,
  gamma,
  sigma,
  epsilon,
  n_grid = 50L,
  s_grid = 5L,
  tol = 1e-15,
  maxiter = 1000
)

dwakeby(
  x,
  alpha,
  beta,
  gamma,
  sigma,
  epsilon,
  n_grid = 50L,
  s_grid = 5L,
  tol = 1e-15,
  maxiter = 1000,
  log = FALSE
)

is_wakeby_valid(alpha, beta, gamma, sigma, epsilon, n_grid = 50L, s_grid = 5L)

ffwakeby(u, alpha, beta, gamma, sigma, epsilon)
}
\arguments{
\item{u}{numeric vector of probabilities}

\item{alpha}{Wakeby scale parameter \eqn{\alpha}}

\item{beta}{Wakeby shape parameter \eqn{\beta}}

\item{gamma}{Wakeby scale parameter \eqn{\gamma}}

\item{sigma}{Wakeby shape parameter \eqn{\sigma}}

\item{epsilon}{Wakeby location parameter \eqn{\epsilon}}

\item{log}{should the log density be returned}

\item{n}{numeric number of samples to draw}

\item{q}{quantile value for which the corresponding cumulative probability value should be found.}

\item{n_grid}{integer size of helper grid to be passed to \code{make_pgrid}. Default is 50}

\item{s_grid}{integer beta shape of helper grid to be passed to \code{make_pgrid}. Default is 5}

\item{tol}{numeric tolerance value for approximating CDF. Default 1e-15}

\item{maxiter}{numeric maximum number of iteration}

\item{x}{numeric vector of data}
}
\value{
quantiles, QDF, DQF, random samples or probabilities of Wakeby disribution
}
\description{
Wakeby distribution
}
\details{
Support \eqn{\epsilon} to \eqn{\infty} if  \eqn{\sigma \geq 0, \gamma>0} or \eqn{\epsilon} to \eqn{\epsilon+(\alpha/\beta)-(\gamma/\sigma)} otherwise.
}
\examples{
p_grd <- make_pgrid()
q_grd <- qwakeby(p_grd, 5, 3, 0.1, 0.2, 0)
f_grd <- fwakeby(p_grd, 5, 3, 0.1, 0.2, 0)
dq_grd <- dqwakeby(p_grd, 5, 3, 0.1, 0.2, 0)
d_grd <- dwakeby(q_grd,5, 3, 0.1, 0.2, 0)
plot(q_grd,dq_grd, type="l", lwd=1, lty=2)
lines(q_grd,d_grd, col="firebrick")
}
